[{"path":"https://shixiangwang.github.io/regport/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 Shixiang Wang Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://shixiangwang.github.io/regport/SUPPORT.html","id":null,"dir":"","previous_headings":"","what":"Getting help with regport","title":"Getting help with regport","text":"Thanks using regport! filing issue, places explore pieces put together make process smooth possible.","code":""},{"path":"https://shixiangwang.github.io/regport/SUPPORT.html","id":"make-a-reprex","dir":"","previous_headings":"","what":"Make a reprex","title":"Getting help with regport","text":"Start making minimal reproducible example using reprex package. haven’t heard used reprex , ’re treat! Seriously, reprex make R-question-asking endeavors easier (pretty insane ROI five ten minutes ’ll take learn ’s ). additional reprex pointers, check Get help! section tidyverse site.","code":""},{"path":"https://shixiangwang.github.io/regport/SUPPORT.html","id":"where-to-ask","dir":"","previous_headings":"","what":"Where to ask?","title":"Getting help with regport","text":"Armed reprex, next step figure ask. ’s question: start community.rstudio.com, /StackOverflow. people answer questions. ’s bug: ’re right place, file issue. ’re sure: let community help figure ! problem bug feature request, can easily return report . opening new issue, sure search issues pull requests make sure bug hasn’t reported /already fixed development version. default, search pre-populated :issue :open. can edit qualifiers (e.g. :pr, :closed) needed. example, ’d simply remove :open search issues repo, open closed.","code":""},{"path":"https://shixiangwang.github.io/regport/SUPPORT.html","id":"what-happens-next","dir":"","previous_headings":"","what":"What happens next?","title":"Getting help with regport","text":"efficient possible, development tidyverse packages tends bursty, shouldn’t worry don’t get immediate response. Typically don’t look repo sufficient quantity issues accumulates, ’s burst intense activity focus efforts. makes development efficient avoids expensive context switching problems, cost taking longer get back . process makes good reprex particularly important might multiple months initial report start working . can’t reproduce bug, can’t fix !","code":""},{"path":"https://shixiangwang.github.io/regport/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Shixiang Wang. Author, maintainer.","code":""},{"path":"https://shixiangwang.github.io/regport/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Wang S (2022). regport: Regression Model Processing Port. https://github.com/ShixiangWang/regport, https://shixiangwang.github.io/regport/.","code":"@Manual{,   title = {regport: Regression Model Processing Port},   author = {Shixiang Wang},   year = {2022},   note = {https://github.com/ShixiangWang/regport, https://shixiangwang.github.io/regport/}, }"},{"path":"https://shixiangwang.github.io/regport/index.html","id":"regport","dir":"","previous_headings":"","what":"Regression Model Processing Port","title":"Regression Model Processing Port","text":"goal regport provides R6 classes, methods utilities construct, analyze, summarize, visualize regression models (CoxPH GLMs).","code":""},{"path":"https://shixiangwang.github.io/regport/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Regression Model Processing Port","text":"can install development version regport like :","code":"remotes::install_github(\"ShixiangWang/regport\")"},{"path":"https://shixiangwang.github.io/regport/index.html","id":"simple-case","dir":"","previous_headings":"","what":"Simple case","title":"Regression Model Processing Port","text":"basic example shows build visualize Cox model. Prepare data: Create model: can also create formula: Take look model result (package see required):  Visualize nice forest plot.","code":"library(regport) library(survival)  lung = survival::lung lung$sex = factor(lung$sex) model = REGModel$new(   lung,   recipe = list(     x = c(\"age\", \"sex\"),     y = c(\"time\", \"status\")   ) )  model #> <REGModel>    ==========  #>  #> Parameter | Coefficient |       SE |       95% CI |     z |     p #> ----------------------------------------------------------------- #> age       |        1.02 | 9.38e-03 | [1.00, 1.04] |  1.85 | 0.065 #> sex [2]   |        0.60 |     0.10 | [0.43, 0.83] | -3.06 | 0.002 #>  #> Uncertainty intervals (equal-tailed) and p values (two-tailed) computed using a #>   Wald z-distribution approximation. #> [coxph] model ========== model = REGModel$new(   lung,   recipe = Surv(time, status) ~ age + sex )  model #> <REGModel>    ==========  #>  #> Parameter | Coefficient |       SE |       95% CI |     z |     p #> ----------------------------------------------------------------- #> age       |        1.02 | 9.38e-03 | [1.00, 1.04] |  1.85 | 0.065 #> sex [2]   |        0.60 |     0.10 | [0.43, 0.83] | -3.06 | 0.002 #>  #> Uncertainty intervals (equal-tailed) and p values (two-tailed) computed using a #>   Wald z-distribution approximation. #> [coxph] model ========== model$plot() model$get_forest_data() model$plot_forest()"},{"path":"https://shixiangwang.github.io/regport/index.html","id":"batch-processing-models","dir":"","previous_headings":"","what":"Batch processing models","title":"Regression Model Processing Port","text":"building list regression model, unlike , lazy building approach used, .e., $build() must manually typed creating REGModelList object. (also means can check modify setting building necessary)","code":"ml <- REGModelList$new(   data = mtcars,   y = \"mpg\",   x = c(\"factor(cyl)\", colnames(mtcars)[3:5]),   covars = c(colnames(mtcars)[8:9], \"factor(gear)\") ) ml #> <REGModelList>    ==========  #>  #> X(s): factor(cyl), disp, hp, drat  #> Y(s): mpg  #> covars: vs, am, factor(gear)  #>  #> Not build yet, run $build() method  #> [] model ========== ml$build(f = \"gaussian\") str(ml$result) #> Classes 'data.table' and 'data.frame':   25 obs. of  10 variables: #>  $ focal_term: chr  \"factor(cyl)\" \"factor(cyl)\" \"factor(cyl)\" \"factor(cyl)\" ... #>  $ variable  : chr  \"(Intercept)\" \"factor(cyl)6\" \"factor(cyl)8\" \"vs\" ... #>  $ estimate  : num  23.28 -5.34 -8.5 1.68 4.31 ... #>  $ SE        : num  3.1 1.89 3.05 2.35 2.16 ... #>  $ CI        : num  0.95 0.95 0.95 0.95 0.95 0.95 0.95 0.95 0.95 0.95 ... #>  $ CI_low    : num  17.203 -9.04 -14.473 -2.931 0.084 ... #>  $ CI_high   : num  29.37 -1.64 -2.53 6.3 8.54 ... #>  $ t         : num  7.504 -2.829 -2.791 0.715 1.999 ... #>  $ df_error  : int  25 25 25 25 25 25 25 26 26 26 ... #>  $ p         : num  6.18e-14 4.67e-03 5.25e-03 4.75e-01 4.56e-02 ... #>  - attr(*, \".internal.selfref\")=<externalptr> str(ml$forest_data) #> Classes 'data.table' and 'data.frame':   6 obs. of  17 variables: #>  $ focal_term: chr  \"factor(cyl)\" \"factor(cyl)\" \"factor(cyl)\" \"disp\" ... #>  $ variable  : chr  \"factor(cyl)\" NA NA \"disp\" ... #>  $ term      : chr  \"factor(cyl)4\" \"factor(cyl)6\" \"factor(cyl)8\" \"disp\" ... #>  $ term_label: chr  \"factor(cyl)\" \"factor(cyl)\" \"factor(cyl)\" \"disp\" ... #>  $ class     : chr  \"factor\" \"factor\" \"factor\" \"numeric\" ... #>  $ level     : chr  \"4\" \"6\" \"8\" NA ... #>  $ level_no  : int  1 2 3 NA NA NA #>  $ n         : int  11 7 14 32 32 32 #>  $ estimate  : num  0 -5.3404 -8.5026 -0.0282 -0.0515 ... #>  $ SE        : num  NA 1.88767 3.04626 0.00924 0.01201 ... #>  $ CI        : num  NA 0.95 0.95 0.95 0.95 0.95 #>  $ CI_low    : num  NA -9.0402 -14.4732 -0.0463 -0.075 ... #>  $ CI_high   : num  NA -1.6407 -2.532 -0.0101 -0.0279 ... #>  $ t         : num  NA -2.83 -2.79 -3.05 -4.28 ... #>  $ df_error  : int  NA 25 25 26 26 26 #>  $ p         : num  NA 4.67e-03 5.25e-03 2.27e-03 1.84e-05 ... #>  $ reference : logi  TRUE FALSE FALSE FALSE FALSE FALSE #>  - attr(*, \".internal.selfref\")=<externalptr>  ml$plot_forest(ref_line = 0, xlim = c(-15, 8))"},{"path":"https://shixiangwang.github.io/regport/index.html","id":"coverage","dir":"","previous_headings":"","what":"Coverage","title":"Regression Model Processing Port","text":"","code":"covr::package_coverage() #> regport Coverage: 90.59% #> R/utils.R: 75.00% #> R/REGModel.R: 89.19% #> R/REGModelList.R: 98.28%"},{"path":"https://shixiangwang.github.io/regport/index.html","id":"license","dir":"","previous_headings":"","what":"LICENSE","title":"Regression Model Processing Port","text":"(MIT) Copyright (c) 2022 Shixiang Wang","code":""},{"path":"https://shixiangwang.github.io/regport/reference/REGModel.html","id":null,"dir":"Reference","previous_headings":"","what":"R6 class representing a regression model — REGModel","title":"R6 class representing a regression model — REGModel","text":"Contains fields storing data methods build, process visualize regression model. Currently, class designed CoxPH GLM regression models.","code":""},{"path":"https://shixiangwang.github.io/regport/reference/REGModel.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"R6 class representing a regression model — REGModel","text":"data data.table storing modeling data. recipe R formula storing model formula. terms terms (covariables, .e. columns) used building model. args arguments used building model. model constructed model. type model type (class). result model result, object parameters_model. Can converted data.frame .data.frame() data.table::.data.table(). forest_data detailed data used plotting forest.","code":""},{"path":[]},{"path":"https://shixiangwang.github.io/regport/reference/REGModel.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"R6 class representing a regression model — REGModel","text":"REGModel$new() REGModel$get_forest_data() REGModel$plot_forest() REGModel$plot() REGModel$print() REGModel$clone()","code":""},{"path":"https://shixiangwang.github.io/regport/reference/REGModel.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"R6 class representing a regression model — REGModel","text":"Build REGModel object.","code":""},{"path":"https://shixiangwang.github.io/regport/reference/REGModel.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 class representing a regression model — REGModel","text":"","code":"REGModel$new(   data,   recipe,   ...,   f = c(\"coxph\", \"binomial\", \"gaussian\", \"Gamma\", \"inverse.gaussian\", \"poisson\",     \"quasi\", \"quasibinomial\", \"quasipoisson\"),   exp = NULL,   ci = 0.95 )"},{"path":"https://shixiangwang.github.io/regport/reference/REGModel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 class representing a regression model — REGModel","text":"data data.table storing modeling data. recipe R formula list two elements 'x' 'y', 'x' covariables 'y' label. See example detail operation. ... parameters passing corresponding regression model function. f length-1 string specifying modeling function family glm(), default 'coxph'. options members GLM family, see stats::family(). 'binomial' logistic, 'gaussian' linear. exp logical, indicating whether exponentiate coefficients. ci confidence Interval (CI) level. Default 0.95 (95%). e.g. survival::coxph().","code":""},{"path":"https://shixiangwang.github.io/regport/reference/REGModel.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 class representing a regression model — REGModel","text":"REGModel R6 object.","code":""},{"path":"https://shixiangwang.github.io/regport/reference/REGModel.html","id":"method-get-forest-data-","dir":"Reference","previous_headings":"","what":"Method get_forest_data()","title":"R6 class representing a regression model — REGModel","text":"get tidy data plotting forest.","code":""},{"path":"https://shixiangwang.github.io/regport/reference/REGModel.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 class representing a regression model — REGModel","text":"","code":"REGModel$get_forest_data(separate_factor = FALSE, global_p = FALSE)"},{"path":"https://shixiangwang.github.io/regport/reference/REGModel.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 class representing a regression model — REGModel","text":"separate_factor separate factor/class blank row. global_p TRUE, return global p value.","code":""},{"path":"https://shixiangwang.github.io/regport/reference/REGModel.html","id":"method-plot-forest-","dir":"Reference","previous_headings":"","what":"Method plot_forest()","title":"R6 class representing a regression model — REGModel","text":"plot forest.","code":""},{"path":"https://shixiangwang.github.io/regport/reference/REGModel.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 class representing a regression model — REGModel","text":"","code":"REGModel$plot_forest(ref_line = NULL, xlim = NULL, ...)"},{"path":"https://shixiangwang.github.io/regport/reference/REGModel.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 class representing a regression model — REGModel","text":"ref_line reference line, default 1 HR. xlim limits x axis. ... plot options passing forestploter::forest(). Also check https://github.com/adayim/forestploter see complex adjustment result plot.","code":""},{"path":"https://shixiangwang.github.io/regport/reference/REGModel.html","id":"method-plot-","dir":"Reference","previous_headings":"","what":"Method plot()","title":"R6 class representing a regression model — REGModel","text":"print REGModel$result default plot methods see package.","code":""},{"path":"https://shixiangwang.github.io/regport/reference/REGModel.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 class representing a regression model — REGModel","text":"","code":"REGModel$plot(...)"},{"path":"https://shixiangwang.github.io/regport/reference/REGModel.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 class representing a regression model — REGModel","text":"... parameters passing plot() see:::plot.see_parameters_model function.","code":""},{"path":"https://shixiangwang.github.io/regport/reference/REGModel.html","id":"method-print-","dir":"Reference","previous_headings":"","what":"Method print()","title":"R6 class representing a regression model — REGModel","text":"print REGModel object","code":""},{"path":"https://shixiangwang.github.io/regport/reference/REGModel.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 class representing a regression model — REGModel","text":"","code":"REGModel$print(...)"},{"path":"https://shixiangwang.github.io/regport/reference/REGModel.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 class representing a regression model — REGModel","text":"... unused.","code":""},{"path":"https://shixiangwang.github.io/regport/reference/REGModel.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"R6 class representing a regression model — REGModel","text":"objects class cloneable method.","code":""},{"path":"https://shixiangwang.github.io/regport/reference/REGModel.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 class representing a regression model — REGModel","text":"","code":"REGModel$clone(deep = FALSE)"},{"path":"https://shixiangwang.github.io/regport/reference/REGModel.html","id":"arguments-5","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 class representing a regression model — REGModel","text":"deep Whether make deep clone.","code":""},{"path":"https://shixiangwang.github.io/regport/reference/REGModel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"R6 class representing a regression model — REGModel","text":"","code":"library(survival) test1 <- data.frame(   time = c(4, 3, 1, 1, 2, 2, 3),   status = c(1, 1, 1, 0, 1, 1, 0),   x = c(0, 2, 1, 1, 1, 0, 0),   sex = c(0, 0, 0, 0, 1, 1, 1) ) test1$sex <- factor(test1$sex)  # -------------- # Build a model # --------------  # way 1: mm <- REGModel$new(   test1,   Surv(time, status) ~ x + strata(sex) ) mm #> <REGModel>    ==========  #>  #> Parameter | Coefficient |   SE |        95% CI |    z |     p #> ------------------------------------------------------------- #> x         |        2.23 | 1.83 | [0.45, 11.18] | 0.98 | 0.329 #>  #> Uncertainty intervals (equal-tailed) and p values (two-tailed) computed using a #>   Wald z-distribution approximation. #> [coxph] model ========== as.data.frame(mm$result) #>   Parameter Coefficient      SE   CI    CI_low  CI_high         z df_error #> 1         x    2.230706 1.83448 0.95 0.4450758 11.18022 0.9756088      Inf #>           p #> 1 0.3292583 if (require(\"see\")) mm$plot() #> Loading required package: see  mm$print() # Same as print(mm) #> <REGModel>    ==========  #>  #> Parameter | Coefficient |   SE |        95% CI |    z |     p #> ------------------------------------------------------------- #> x         |        2.23 | 1.83 | [0.45, 11.18] | 0.98 | 0.329 #>  #> Uncertainty intervals (equal-tailed) and p values (two-tailed) computed using a #>   Wald z-distribution approximation. #> [coxph] model ==========  # way 2: mm2 <- REGModel$new(   test1,   recipe = list(     x = c(\"x\", \"strata(sex)\"),     y = c(\"time\", \"status\")   ) ) mm2 #> <REGModel>    ==========  #>  #> Parameter | Coefficient |   SE |        95% CI |    z |     p #> ------------------------------------------------------------- #> x         |        2.23 | 1.83 | [0.45, 11.18] | 0.98 | 0.329 #>  #> Uncertainty intervals (equal-tailed) and p values (two-tailed) computed using a #>   Wald z-distribution approximation. #> [coxph] model ==========  # Add other parameters, e.g., weights # For more, see ?coxph mm3 <- REGModel$new(   test1,   recipe = list(     x = c(\"x\", \"strata(sex)\"),     y = c(\"time\", \"status\")   ),   weights = c(1, 1, 1, 2, 2, 2, 3) ) mm3$args #> $weights #> [1] 1 1 1 2 2 2 3 #>   # ---------------------- # Another type of model # ---------------------- library(stats) counts <- c(18, 17, 15, 20, 10, 20, 25, 13, 12) outcome <- gl(3, 1, 9) treatment <- gl(3, 3) data <- data.frame(treatment, outcome, counts)  mm4 <- REGModel$new(   data,   counts ~ outcome + treatment,   f = \"poisson\" ) mm4 #> <REGModel>    ==========  #>  #> Parameter     | Log-Mean |   SE |         95% CI |        z |      p #> -------------------------------------------------------------------- #> (Intercept)   |     3.04 | 0.17 | [ 2.70,  3.37] |    17.81 | < .001 #> outcome [2]   |    -0.45 | 0.20 | [-0.86, -0.06] |    -2.25 | 0.025  #> outcome [3]   |    -0.29 | 0.19 | [-0.68,  0.08] |    -1.52 | 0.128  #> treatment [2] | 1.34e-15 | 0.20 | [-0.39,  0.39] | 6.69e-15 | > .999 #> treatment [3] | 1.42e-15 | 0.20 | [-0.39,  0.39] | 7.11e-15 | > .999 #>  #> Uncertainty intervals (profile-likelihood) and p values (two-tailed) computed #>   using a Wald z-distribution approximation. #> [glm/lm] model ========== mm4$plot_forest() #> Never call '$get_forest_data()' before, run with default options to get plotting data  mm4$get_forest_data() mm4$plot_forest()"},{"path":"https://shixiangwang.github.io/regport/reference/REGModelList.html","id":null,"dir":"Reference","previous_headings":"","what":"R6 class representing a list of regression model — REGModelList","title":"R6 class representing a list of regression model — REGModelList","text":"Contains fields storing data methods build, process visualize list regression model. Currently, class designed CoxPH GLM regression models.","code":""},{"path":"https://shixiangwang.github.io/regport/reference/REGModelList.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"R6 class representing a list of regression model — REGModelList","text":"data data.table storing modeling data. x focal variables (terms). y predicted variables expression. covars covariables. mlist list REGModel. args arguments used building model. type model type (class). result model result, object parameters_model. Can converted data.frame .data.frame() data.table::.data.table(). forest_data detailed data used plotting forest.","code":""},{"path":[]},{"path":"https://shixiangwang.github.io/regport/reference/REGModelList.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"R6 class representing a list of regression model — REGModelList","text":"REGModelList$new() REGModelList$build() REGModelList$plot_forest() REGModelList$print() REGModelList$clone()","code":""},{"path":"https://shixiangwang.github.io/regport/reference/REGModelList.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"R6 class representing a list of regression model — REGModelList","text":"Create REGModelList object.","code":""},{"path":"https://shixiangwang.github.io/regport/reference/REGModelList.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 class representing a list of regression model — REGModelList","text":"","code":"REGModelList$new(data, y, x, covars = NULL)"},{"path":"https://shixiangwang.github.io/regport/reference/REGModelList.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 class representing a list of regression model — REGModelList","text":"data data.table storing modeling data. y predicted variables expression. x focal variables (terms). covars covariables.","code":""},{"path":"https://shixiangwang.github.io/regport/reference/REGModelList.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 class representing a list of regression model — REGModelList","text":"REGModelList R6 object.","code":""},{"path":"https://shixiangwang.github.io/regport/reference/REGModelList.html","id":"method-build-","dir":"Reference","previous_headings":"","what":"Method build()","title":"R6 class representing a list of regression model — REGModelList","text":"Build REGModelList object.","code":""},{"path":"https://shixiangwang.github.io/regport/reference/REGModelList.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 class representing a list of regression model — REGModelList","text":"","code":"REGModelList$build(   f = c(\"coxph\", \"binomial\", \"gaussian\", \"Gamma\", \"inverse.gaussian\", \"poisson\",     \"quasi\", \"quasibinomial\", \"quasipoisson\"),   exp = NULL,   ci = 0.95,   parallel = FALSE,   ... )"},{"path":"https://shixiangwang.github.io/regport/reference/REGModelList.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 class representing a list of regression model — REGModelList","text":"f length-1 string specifying modeling function family glm(), default 'coxph'. options members GLM family, see stats::family(). 'binomial' logistic, 'gaussian' linear. exp logical, indicating whether exponentiate coefficients. ci confidence Interval (CI) level. Default 0.95 (95%). e.g. survival::coxph(). parallel TRUE, use N-1 cores run task. ... parameters passing corresponding regression model function.","code":""},{"path":"https://shixiangwang.github.io/regport/reference/REGModelList.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 class representing a list of regression model — REGModelList","text":"REGModel R6 object.","code":""},{"path":"https://shixiangwang.github.io/regport/reference/REGModelList.html","id":"method-plot-forest-","dir":"Reference","previous_headings":"","what":"Method plot_forest()","title":"R6 class representing a list of regression model — REGModelList","text":"plot forest.","code":""},{"path":"https://shixiangwang.github.io/regport/reference/REGModelList.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 class representing a list of regression model — REGModelList","text":"","code":"REGModelList$plot_forest(   ref_line = NULL,   xlim = NULL,   vars = NULL,   p = NULL,   ... )"},{"path":"https://shixiangwang.github.io/regport/reference/REGModelList.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 class representing a list of regression model — REGModelList","text":"ref_line reference line, default 1 HR. xlim limits x axis. vars selected variables show. p selected variables level' pvalue lower p. ... plot options passing forestploter::forest(). Also check https://github.com/adayim/forestploter see complex adjustment result plot.","code":""},{"path":"https://shixiangwang.github.io/regport/reference/REGModelList.html","id":"method-print-","dir":"Reference","previous_headings":"","what":"Method print()","title":"R6 class representing a list of regression model — REGModelList","text":"print REGModelList object","code":""},{"path":"https://shixiangwang.github.io/regport/reference/REGModelList.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 class representing a list of regression model — REGModelList","text":"","code":"REGModelList$print(...)"},{"path":"https://shixiangwang.github.io/regport/reference/REGModelList.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 class representing a list of regression model — REGModelList","text":"... unused.","code":""},{"path":"https://shixiangwang.github.io/regport/reference/REGModelList.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"R6 class representing a list of regression model — REGModelList","text":"objects class cloneable method.","code":""},{"path":"https://shixiangwang.github.io/regport/reference/REGModelList.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 class representing a list of regression model — REGModelList","text":"","code":"REGModelList$clone(deep = FALSE)"},{"path":"https://shixiangwang.github.io/regport/reference/REGModelList.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 class representing a list of regression model — REGModelList","text":"deep Whether make deep clone.","code":""},{"path":"https://shixiangwang.github.io/regport/reference/REGModelList.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"R6 class representing a list of regression model — REGModelList","text":"","code":"ml <- REGModelList$new(   data = mtcars,   y = \"mpg\",   x = c(\"factor(cyl)\", colnames(mtcars)[3:5]),   covars = c(colnames(mtcars)[8:9], \"factor(gear)\") ) ml #> <REGModelList>    ==========  #>  #> X(s): factor(cyl), disp, hp, drat  #> Y(s): mpg  #> covars: vs, am, factor(gear)  #>  #> Not build yet, run $build() method  #> [] model ========== ml$print() #> <REGModelList>    ==========  #>  #> X(s): factor(cyl), disp, hp, drat  #> Y(s): mpg  #> covars: vs, am, factor(gear)  #>  #> Not build yet, run $build() method  #> [] model ========== ml$plot_forest() #> Please run $build() before $plot_forest() #> NULL  ml$build(f = \"gaussian\") ml$build(f = \"gaussian\", parallel = TRUE) ml$print() #> <REGModelList>    ==========  #>  #> X(s): factor(cyl), disp, hp, drat  #> Y(s): mpg  #> covars: vs, am, factor(gear)  #> ---- #>  Result:  #>      focal_term      variable    estimate          SE   CI       CI_low #>  1: factor(cyl)   (Intercept) 23.28425686 3.102848398 0.95  17.20278575 #>  2: factor(cyl)  factor(cyl)6 -5.34044537 1.887666208 0.95  -9.04020315 #>  3: factor(cyl)  factor(cyl)8 -8.50258933 3.046261922 0.95 -14.47315299 #>  4: factor(cyl)            vs  1.68270326 2.353962963 0.95  -2.93097937 #>  5: factor(cyl)            am  4.31056447 2.156460225 0.95   0.08398010 #>  6: factor(cyl) factor(gear)4 -1.24673744 2.264460155 0.95  -5.68499779 #>  7: factor(cyl) factor(gear)5 -2.08223718 2.637768301 0.95  -7.25216805 #>  8:        disp   (Intercept) 24.65009765 3.360529174 0.95  18.06358150 #>  9:        disp          disp -0.02821806 0.009243695 0.95  -0.04633537 #> 10:        disp            vs  3.32060607 1.856416709 0.95  -0.31790382 #> 11:        disp            am  4.67281942 2.094171633 0.95   0.56831844 #> 12:        disp factor(gear)4 -2.52785760 2.211888366 0.95  -6.86307914 #> 13:        disp factor(gear)5 -2.89344598 2.574494892 0.95  -7.93936325 #> 14:          hp   (Intercept) 24.56544525 2.420389406 0.95  19.82156919 #> 15:          hp            hp -0.05145024 0.012010845 0.95  -0.07499106 #> 16:          hp            vs  3.01661776 1.574374865 0.95  -0.06910027 #> 17:          hp            am  5.11093165 1.798753134 0.95   1.58544029 #> 18:          hp factor(gear)4 -1.34845141 1.896221483 0.95  -5.06497722 #> 19:          hp factor(gear)5  1.16396634 2.363608073 0.95  -3.46862036 #> 20:        drat   (Intercept)  5.36259687 7.058661715 0.95  -8.47212587 #> 21:        drat          drat  3.01056864 2.245957350 0.95  -1.39142687 #> 22:        drat            vs  6.56480882 1.648702814 0.95   3.33341068 #> 23:        drat            am  6.04958546 2.304973039 0.95   1.53192132 #> 24:        drat factor(gear)4 -2.50572707 2.796115713 0.95  -7.98601316 #> 25:        drat factor(gear)5 -3.13453090 3.068393855 0.95  -9.14847234 #>      focal_term      variable    estimate          SE   CI       CI_low #>         CI_high          t df_error            p #>  1: 29.36572797  7.5041555       25 6.182588e-14 #>  2: -1.64068758 -2.8291259       25 4.667533e-03 #>  3: -2.53202568 -2.7911550       25 5.252031e-03 #>  4:  6.29638589  0.7148385       25 4.747089e-01 #>  5:  8.53714885  1.9989075       25 4.561837e-02 #>  6:  3.19152291 -0.5505672       25 5.819304e-01 #>  7:  3.08769369 -0.7893935       25 4.298820e-01 #>  8: 31.23661380  7.3351834       26 2.214181e-13 #>  9: -0.01010075 -3.0526817       26 2.268064e-03 #> 10:  6.95911596  1.7887180       26 7.366023e-02 #> 11:  8.77732040  2.2313450       26 2.565828e-02 #> 12:  1.80736393 -1.1428504       26 2.531007e-01 #> 13:  2.15247129 -1.1238888       26 2.610602e-01 #> 14: 29.30932132 10.1493773       26 3.334845e-24 #> 15: -0.02790942 -4.2836487       26 1.838531e-05 #> 16:  6.10233579  1.9160734       26 5.535576e-02 #> 17:  8.63642301  2.8413747       26 4.491950e-03 #> 18:  2.36807440 -0.7111255       26 4.770065e-01 #> 19:  5.79655303  0.4924532       26 6.223990e-01 #> 20: 19.19731961  0.7597186       26 4.474228e-01 #> 21:  7.41256416  1.3404389       26 1.801027e-01 #> 22:  9.79620695  3.9818024       26 6.839463e-05 #> 23: 10.56724960  2.6245797       26 8.675598e-03 #> 24:  2.97455903 -0.8961457       26 3.701750e-01 #> 25:  2.87941055 -1.0215543       26 3.069919e-01 #>         CI_high          t df_error            p #> [glm/lm] model ========== ml$result #>      focal_term      variable    estimate          SE   CI       CI_low #>  1: factor(cyl)   (Intercept) 23.28425686 3.102848398 0.95  17.20278575 #>  2: factor(cyl)  factor(cyl)6 -5.34044537 1.887666208 0.95  -9.04020315 #>  3: factor(cyl)  factor(cyl)8 -8.50258933 3.046261922 0.95 -14.47315299 #>  4: factor(cyl)            vs  1.68270326 2.353962963 0.95  -2.93097937 #>  5: factor(cyl)            am  4.31056447 2.156460225 0.95   0.08398010 #>  6: factor(cyl) factor(gear)4 -1.24673744 2.264460155 0.95  -5.68499779 #>  7: factor(cyl) factor(gear)5 -2.08223718 2.637768301 0.95  -7.25216805 #>  8:        disp   (Intercept) 24.65009765 3.360529174 0.95  18.06358150 #>  9:        disp          disp -0.02821806 0.009243695 0.95  -0.04633537 #> 10:        disp            vs  3.32060607 1.856416709 0.95  -0.31790382 #> 11:        disp            am  4.67281942 2.094171633 0.95   0.56831844 #> 12:        disp factor(gear)4 -2.52785760 2.211888366 0.95  -6.86307914 #> 13:        disp factor(gear)5 -2.89344598 2.574494892 0.95  -7.93936325 #> 14:          hp   (Intercept) 24.56544525 2.420389406 0.95  19.82156919 #> 15:          hp            hp -0.05145024 0.012010845 0.95  -0.07499106 #> 16:          hp            vs  3.01661776 1.574374865 0.95  -0.06910027 #> 17:          hp            am  5.11093165 1.798753134 0.95   1.58544029 #> 18:          hp factor(gear)4 -1.34845141 1.896221483 0.95  -5.06497722 #> 19:          hp factor(gear)5  1.16396634 2.363608073 0.95  -3.46862036 #> 20:        drat   (Intercept)  5.36259687 7.058661715 0.95  -8.47212587 #> 21:        drat          drat  3.01056864 2.245957350 0.95  -1.39142687 #> 22:        drat            vs  6.56480882 1.648702814 0.95   3.33341068 #> 23:        drat            am  6.04958546 2.304973039 0.95   1.53192132 #> 24:        drat factor(gear)4 -2.50572707 2.796115713 0.95  -7.98601316 #> 25:        drat factor(gear)5 -3.13453090 3.068393855 0.95  -9.14847234 #>      focal_term      variable    estimate          SE   CI       CI_low #>         CI_high          t df_error            p #>  1: 29.36572797  7.5041555       25 6.182588e-14 #>  2: -1.64068758 -2.8291259       25 4.667533e-03 #>  3: -2.53202568 -2.7911550       25 5.252031e-03 #>  4:  6.29638589  0.7148385       25 4.747089e-01 #>  5:  8.53714885  1.9989075       25 4.561837e-02 #>  6:  3.19152291 -0.5505672       25 5.819304e-01 #>  7:  3.08769369 -0.7893935       25 4.298820e-01 #>  8: 31.23661380  7.3351834       26 2.214181e-13 #>  9: -0.01010075 -3.0526817       26 2.268064e-03 #> 10:  6.95911596  1.7887180       26 7.366023e-02 #> 11:  8.77732040  2.2313450       26 2.565828e-02 #> 12:  1.80736393 -1.1428504       26 2.531007e-01 #> 13:  2.15247129 -1.1238888       26 2.610602e-01 #> 14: 29.30932132 10.1493773       26 3.334845e-24 #> 15: -0.02790942 -4.2836487       26 1.838531e-05 #> 16:  6.10233579  1.9160734       26 5.535576e-02 #> 17:  8.63642301  2.8413747       26 4.491950e-03 #> 18:  2.36807440 -0.7111255       26 4.770065e-01 #> 19:  5.79655303  0.4924532       26 6.223990e-01 #> 20: 19.19731961  0.7597186       26 4.474228e-01 #> 21:  7.41256416  1.3404389       26 1.801027e-01 #> 22:  9.79620695  3.9818024       26 6.839463e-05 #> 23: 10.56724960  2.6245797       26 8.675598e-03 #> 24:  2.97455903 -0.8961457       26 3.701750e-01 #> 25:  2.87941055 -1.0215543       26 3.069919e-01 #>         CI_high          t df_error            p ml$forest_data #>     focal_term    variable         term  term_label   class level level_no  n #> 1: factor(cyl) factor(cyl) factor(cyl)4 factor(cyl)  factor     4        1 11 #> 2: factor(cyl)        <NA> factor(cyl)6 factor(cyl)  factor     6        2  7 #> 3: factor(cyl)        <NA> factor(cyl)8 factor(cyl)  factor     8        3 14 #> 4:        disp        disp         disp        disp numeric  <NA>       NA 32 #> 5:          hp          hp           hp          hp numeric  <NA>       NA 32 #> 6:        drat        drat         drat        drat numeric  <NA>       NA 32 #>       estimate          SE   CI       CI_low     CI_high         t df_error #> 1:  0.00000000          NA   NA           NA          NA        NA       NA #> 2: -5.34044537 1.887666208 0.95  -9.04020315 -1.64068758 -2.829126       25 #> 3: -8.50258933 3.046261922 0.95 -14.47315299 -2.53202568 -2.791155       25 #> 4: -0.02821806 0.009243695 0.95  -0.04633537 -0.01010075 -3.052682       26 #> 5: -0.05145024 0.012010845 0.95  -0.07499106 -0.02790942 -4.283649       26 #> 6:  3.01056864 2.245957350 0.95  -1.39142687  7.41256416  1.340439       26 #>               p reference #> 1:           NA      TRUE #> 2: 4.667533e-03     FALSE #> 3: 5.252031e-03     FALSE #> 4: 2.268064e-03     FALSE #> 5: 1.838531e-05     FALSE #> 6: 1.801027e-01     FALSE ml$plot_forest()"},{"path":"https://shixiangwang.github.io/regport/reference/regport-package.html","id":null,"dir":"Reference","previous_headings":"","what":"regport: Regression Model Processing Port — regport-package","title":"regport: Regression Model Processing Port — regport-package","text":"Provides R6 classes, methods utilities construct, analyze, summarize, visualize regression models.","code":""},{"path":[]},{"path":"https://shixiangwang.github.io/regport/reference/regport-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"regport: Regression Model Processing Port — regport-package","text":"Maintainer: Shixiang Wang w_shixiang@163.com (ORCID)","code":""},{"path":"https://shixiangwang.github.io/regport/news/index.html","id":"regport-030","dir":"Changelog","previous_headings":"","what":"regport 0.3.0","title":"regport 0.3.0","text":"Fixed bug parsing column names interaction term.","code":""},{"path":"https://shixiangwang.github.io/regport/news/index.html","id":"regport-024","dir":"Changelog","previous_headings":"","what":"regport 0.2.4","title":"regport 0.2.4","text":"Supported selected plot $plot_forest(), e.g., ml$plot_forest(vars = c(\"disp\", \"hp\")). Wrapped error remove failed model builds. Allowed passing parameters $plot() method. Removed limits R6 class, reset default.","code":""},{"path":"https://shixiangwang.github.io/regport/news/index.html","id":"regport-023","dir":"Changelog","previous_headings":"","what":"regport 0.2.3","title":"regport 0.2.3","text":"Auto-rendering proper refline model list. Checked measure CI plotting forest.","code":""},{"path":"https://shixiangwang.github.io/regport/news/index.html","id":"regport-022","dir":"Changelog","previous_headings":"","what":"regport 0.2.2","title":"regport 0.2.2","text":"Added parallel option $build() method support parallel computation Unix-like systems.","code":""},{"path":"https://shixiangwang.github.io/regport/news/index.html","id":"regport-021","dir":"Changelog","previous_headings":"","what":"regport 0.2.1","title":"regport 0.2.1","text":"Enhanced plot_forest() options.","code":""},{"path":"https://shixiangwang.github.io/regport/news/index.html","id":"regport-020","dir":"Changelog","previous_headings":"","what":"regport 0.2.0","title":"regport 0.2.0","text":"CRAN release: 2022-04-06 Designed core features implemented.","code":""},{"path":"https://shixiangwang.github.io/regport/news/index.html","id":"regport-0009000","dir":"Changelog","previous_headings":"","what":"regport 0.0.0.9000","title":"regport 0.0.0.9000","text":"Added NEWS.md file track changes package.","code":""}]
